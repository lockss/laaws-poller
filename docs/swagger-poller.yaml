---
swagger: "2.0"
info:
  description: "REST API for handling poller tasks\n"
  version: "1.0.0"
  title: "Poller Service API"
  termsOfService: "http://www.lockss.org/terms/"
  contact:
    name: "LOCKSS Support"
    url: "http://www.lockss.org"
    email: "support@lockss.org"
  license:
    name: "Modified BSD License"
    url: "https://www.lockss.org/support/open-source-license/"
host: "laaws.lockss.org:443"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basicAuth: []
paths:
  /polls/:
    get:
      summary: "Get the list of recent polls"
      description: "Get a list of  polls performed by the poller ie return the poll\
        \ queue. if size and page are passed in use those arguments to limit return\
        \ data."
      operationId: "getPolls"
      produces:
      - "application/json"
      parameters:
      - name: "$size"
        in: "query"
        required: false
        type: "integer"
        description: "Size of the page to retrieve."
        x-example: 10
      - name: "$page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve."
        x-example: 1
      responses:
        200:
          description: "A paged list has been returned."
          schema:
            $ref: "#/definitions/pollPageInfo"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/error"
    post:
      summary: "Post a request to call a poll to the poller"
      description: "Use the information found in the descriptor object to initiate\
        \ a  poll."
      operationId: "requestPoll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/pollReq"
      responses:
        202:
          description: "The Poll request has been accepted"
          schema:
            type: "string"
          examples:
            application/json: "A id for this poll."
        401:
          description: "The Request is unauthorized"
          schema:
            $ref: "#/definitions/error"
        403:
          description: "NotEligible"
        404:
          description: "The descriptor (au) can not be found."
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/error"
  /polls/{pollId}:
    get:
      summary: "Get the info for this poll."
      description: "Get the job represented by this job id"
      operationId: "getPoll"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Poll info returned."
          schema:
            $ref: "#/definitions/poll"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "No such poll id."
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/error"
    delete:
      summary: "Stop a poll and remove from queue."
      description: "Stop a running poll and delete any schecduled poll for this pollDesc(Au)\
        \ from the queue."
      operationId: "cancelPoll"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Poll successfully stopped"
          schema:
            $ref: "#/definitions/poll"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "No crawl found with that id"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/error"
    parameters:
    - name: "pollId"
      in: "path"
      required: true
      type: "string"
securityDefinitions:
  basicAuth:
    description: "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    type: "basic"
definitions:
  poll:
    type: "object"
    required:
    - "createTime"
    - "hashAlgorithm"
    - "pollDeadline"
    - "pollKey"
    - "pollSpec"
    - "pollerId"
    - "status"
    - "voteDeadline"
    properties:
      pollerId:
        type: "string"
        description: "The id of the poller who called the poll"
      pollKey:
        type: "string"
        description: "A randomly generated poll id"
      pollSpec:
        $ref: "#/definitions/pollSpec"
      createTime:
        type: "integer"
        format: "int64"
        description: "The timestamp  at which the poll was requested."
      duration:
        type: "integer"
        format: "int64"
        description: "The estimated duration for the poll."
      pollDeadline:
        type: "integer"
        format: "int64"
        description: "The time by which the poll must have completed"
      outerCircleTarget:
        type: "integer"
        format: "int32"
        description: "The number of peers from the poller outer circle to taget."
      hashAlgorithm:
        type: "string"
        description: "The algorithm used by the hasher for this poll."
      status:
        type: "string"
        description: "The current status of the poll."
      voteMargin:
        type: "integer"
        format: "int32"
        description: "The required agreement need to decide landslide agreement or\
          \ disagreement."
      voteDeadline:
        type: "integer"
        format: "int64"
        description: "The  time by which all voters must have voted."
      pollEnd:
        type: "integer"
        format: "int64"
        description: "the time at which the poll ended or -1 if still running."
      quorum:
        type: "integer"
        format: "int32"
        description: "The minimum required for a quroum"
      votedPeers:
        type: "integer"
        format: "int32"
        description: "The number of peers who've voted."
      tallyStatus:
        required:
        - "agreedUrls"
        - "disagreedUrls"
        - "errorUrls"
        - "noQuorumUrls"
        - "tooCloseUrls"
        type: "object"
        description: "The current poll tally"
        properties:
          agreedUrls:
            type: "array"
            description: "Urls with agreement."
            items:
              type: "string"
          disagreedUrls:
            type: "array"
            description: "Urls for which there is disagreement"
            items:
              type: "string"
          tooCloseUrls:
            type: "array"
            description: "Urls which are too close to call."
            items:
              type: "string"
          noQuorumUrls:
            type: "array"
            description: "Urls for which there are not enough votes."
            items:
              type: "string"
          errorUrls:
            type: "array"
            description: "Urls for which there are errors."
            items:
              type: "string"
          weightedAgreedSum:
            type: "number"
            format: "float"
            description: "The weighted sum agreed uris."
            default: 0.0
          weightedDisagreedSum:
            type: "number"
            format: "float"
            description: "The weighted sum of disagree uris."
            default: 0.0
          weightedTooCloseSum:
            type: "number"
            format: "float"
            description: "The sum of the tooClose uris."
            default: 0.0
          weightedNoQuorumSum:
            type: "number"
            format: "float"
            description: "The weighted sum of NoQuorum uris."
            default: 0.0
      repairQueue:
        required:
        - "activeRepairs"
        - "completedRepairs"
        - "pendingRepairs"
        type: "object"
        description: "The collection of repairers for this poll."
        properties:
          pendingRepairs:
            type: "array"
            description: "The repairs which are pending"
            items:
              $ref: "#/definitions/repair"
          activeRepairs:
            type: "array"
            description: "The repairs which are active"
            items:
              $ref: "#/definitions/repair"
          completedRepairs:
            type: "array"
            description: "The completed repairs"
            items:
              $ref: "#/definitions/repair"
    description: "A description of a poll being performed by the Poller"
  pollSpec:
    type: "object"
    required:
    - "cachedUriSet"
    - "pollType"
    properties:
      cachedUriSet:
        $ref: "#/definitions/CachedUriSet"
      pollType:
        type: "integer"
        description: "The type of poll being requested."
      protocolVersion:
        type: "integer"
        description: "The version of polling protocol."
      pluginPollVersion:
        type: "string"
        description: "The version of the polling features of the poll."
      pollVariant:
        type: "string"
        description: "The V3 poll variation."
        enum:
        - "PoR"
        - "PoP"
        - "Local"
        - "NoPoll"
      modulus:
        type: "integer"
        description: "Poll on every 'n'th url."
    description: "The poll spec used to define this poll."
  CachedUriSet:
    type: "object"
    required:
    - "auId"
    - "spec"
    properties:
      auId:
        type: "string"
        description: "The owning archival unit string"
      spec:
        $ref: "#/definitions/CachedUriSetSpec"
    description: "The set of files whose URIs match a list to be polled after filtering\
      \ based on set of url-regex pairs within an AU."
  CachedUriSetSpec:
    type: "object"
    required:
    - "urlPrefix"
    properties:
      urlPrefix:
        type: "string"
        description: "The base which roots the lower and upper bound"
      lowerBound:
        type: "string"
        description: "lower bound of the prefix range, inclusive."
      upperBound:
        type: "string"
        description: "upper bound of prefix range, inclusive."
    description: "A set of urls bounded by  upper and lower restraints. \nIf lower\
      \ = \".\" this is a singleContentNode.\nIf lower is null then start at the root\
      \ url, if upper is null end with the last."
  repair:
    type: "object"
    required:
    - "repairFrom"
    - "uri"
    properties:
      uri:
        type: "string"
        description: "The uri to repair"
      repairFrom:
        type: "string"
        description: "The peer to repair from"
    description: "structure used to define a repair source for url. if the source\
      \ is null than repair from publisher"
  error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        minimum: 400
        maximum: 599
      description:
        type: "string"
        example: "Bad query parameter [$size]: Invalid integer value [abc]"
      reasonPhrase:
        type: "string"
        example: "Bad Request"
    description: "This general error structure is used throughout this API."
    example: "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [$size]:\
      \ Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"
  pageInfo:
    type: "object"
    required:
    - "resultsPerPage"
    properties:
      totalCount:
        type: "integer"
        description: "The total number of objects found."
        example: 150
      resultsPerPage:
        type: "integer"
        description: "The number of results per page."
        example: 20
      currentPage:
        type: "integer"
        description: "The current page number"
        example: 2
      prevLink:
        type: "string"
        description: "The url of the prev page of results or null"
      nextLink:
        type: "string"
        description: "The url to the next page of results or null."
    description: "The information needed to page in long list of data"
  pollPageInfo:
    type: "object"
    required:
    - "polls"
    properties:
      polls:
        type: "array"
        description: "The list of polls for the current page."
        items:
          $ref: "#/definitions/poll"
      pageInfo:
        $ref: "#/definitions/pageInfo"
    description: "A page of poll resutls used to page in the poller info."
  pollReq:
    type: "object"
    required:
    - "auid"
    - "lower"
    - "upper"
    - "url"
    properties:
      auid:
        type: "string"
        description: "The auid which defines the poll"
      url:
        type: "string"
        description: "The url from which this poll starts, if null this is the au's\
          \ base url."
        default: "null"
      upper:
        type: "string"
        description: "upper boundary of the prefix range, inclusive.  If null, the\
          \ range is unbounded at the top."
        default: "null"
      lower:
        type: "string"
        description: "lower boundary of the prefix range, inclusive.  If null, the\
          \ range is unbounded at the bottom"
        default: "null"
      pollType:
        type: "integer"
        format: "int32"
        description: "The type of poll to run"
        default: 3
        minimum: 3
        example: 3
    description: "A Poll Request object for used to define a poll. If If lower = “\
      .” this is a singleContentNode."
