/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.lockss.laaws.poller.api;

import org.lockss.laaws.poller.model.Error;
import org.lockss.laaws.poller.model.Poll;
import org.lockss.laaws.poller.model.PollPageInfo;
import org.lockss.laaws.poller.model.PollReq;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "polls", description = "the polls API")
public interface PollsApi {

    PollsApiDelegate getDelegate();

    @ApiOperation(value = "Stop a poll and remove from queue.", nickname = "cancelPoll", notes = "Stop a running poll and delete any schecduled poll for this pollDesc(Au) from the queue.", response = Poll.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Poll successfully stopped", response = Poll.class),
        @ApiResponse(code = 401, message = "Unauthorized request", response = Error.class),
        @ApiResponse(code = 404, message = "No crawl found with that id", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/polls/{pollId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Poll> cancelPoll(@ApiParam(value = "",required=true) @PathVariable("pollId") String pollId) {
        return getDelegate().cancelPoll(pollId);
    }


    @ApiOperation(value = "Get the info for this poll.", nickname = "getPoll", notes = "Get the job represented by this job id", response = Poll.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Poll info returned.", response = Poll.class),
        @ApiResponse(code = 400, message = "Status 400", response = Error.class),
        @ApiResponse(code = 404, message = "No such poll id.", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/polls/{pollId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Poll> getPoll(@ApiParam(value = "",required=true) @PathVariable("pollId") String pollId) {
        return getDelegate().getPoll(pollId);
    }


    @ApiOperation(value = "Get the list of recent polls", nickname = "getPolls", notes = "Get a list of  polls performed by the poller ie return the poll queue. if size and page are passed in use those arguments to limit return data.", response = PollPageInfo.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A paged list has been returned.", response = PollPageInfo.class),
        @ApiResponse(code = 401, message = "Unauthorized request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/polls/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<PollPageInfo> getPolls(@ApiParam(value = "Size of the page to retrieve.") @Valid @RequestParam(value = "$size", required = false) Integer size,@ApiParam(value = "Number of the page to retrieve.") @Valid @RequestParam(value = "$page", required = false) Integer page) {
        return getDelegate().getPolls(size, page);
    }


    @ApiOperation(value = "Post a request to call a poll to the poller", nickname = "requestPoll", notes = "Use the information found in the descriptor object to initiate a  poll.", response = String.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "The Poll request has been accepted", response = String.class),
        @ApiResponse(code = 401, message = "The Request is unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "NotEligible"),
        @ApiResponse(code = 404, message = "The descriptor (au) can not be found.", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/polls/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> requestPoll(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PollReq body) {
        return getDelegate().requestPoll(body);
    }

}
